openapi: "3.1.0"
info:
  version: 1.0.0
  title: OpenAPI Inventory System
  description: A sample API that uses an inventory system as an example.
  termsOfService: http://superorbital.io/
  contact:
    name: SuperOrbital
    email: opensource@superorbital.io
    url: http://superorbital.io/
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html
servers:
  - url: http://inventory.swagger.io/api
paths:
  /items:
    get:
      description: |
        Returns all items from the system that the user has access to
      operationId: findItems
      parameters:
        - name: tags
          in: query
          description: tags to filter by
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
        - name: limit
          in: query
          description: maximum number of results to return
          required: false
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: item response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Item'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      description: Creates a new item in the store. Duplicates are allowed
      operationId: addItem
      requestBody:
        description: Item to add to the store
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewItem'
      responses:
        '200':
          description: item response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Item'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /items/{id}:
    get:
      description: Returns a user based on a single ID, if the user does not have access to the item
      operationId: find item by id
      parameters:
        - name: id
          in: path
          description: ID of item to fetch
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: item response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Item'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      description: updates a single item based on the ID supplied
      operationId: updateItem
      parameters:
        - name: id
          in: path
          description: ID of item to fetch
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: Item to update in the store
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewItem'
      responses:
        200:
          description: OK
          schema:
            $ref: "#/definitions/item"
        default:
          description: error
          schema:
            $ref: "#/definitions/error"
    delete:
      description: deletes a single item based on the ID supplied
      operationId: deleteItem
      parameters:
        - name: id
          in: path
          description: ID of item to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: item deleted
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
components:
  schemas:
    Item:
      allOf:
        - $ref: '#/components/schemas/NewItem'
        - type: object
          required:
          - id
          properties:
            id:
              type: integer
              format: int64
    NewItem:
      type: object
      required:
        - name
      properties:
        name:
          type: string
        tag:
          type: string
    Error:
      type: object
      required:
        - code
        - message
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string
